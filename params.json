{
  "name": "Xdust",
  "tagline": "Don't limit templates to be placed on local file-System. XDust let you fetch templates whatever source you can think of, it can be a database or databases, ftp or S3 Bucket.",
  "body": "# xdust (WIP)\r\nA dust template engine for express framework.\r\nit can be use to fetch templates from multiple sources like - \r\nfileSystem (templates defined under views folder),\r\ndatabases (Mongo, MySql) and any other place. \r\n\r\n\r\n## USE\r\n\r\n> Requiring using common js pattern.\r\n\r\n    var xDust = require('xdust');\r\n    app.engine('dust', xDust(app).__express());\r\n    app.set('view engine', 'dust');\r\n \r\n> Here app is an Express Application.\r\n\r\n## Extend\r\n\r\n    xDust(express_app, reader, redisClient);\r\n\r\n> Example reading from mongodb\r\n     \r\n     var mongoReader = {\r\n        source: 'db',\r\n        read: function(fullPath, templateName, cb){\r\n            //reading from defined Template Model\r\n            Template.findOne({name,templateName},function(err, doc){\r\n                if(err, !doc) return cb(err, doc.body);\r\n                return cb(new Error('Template not found!'));\r\n            });\r\n        }\r\n      };   \r\n\t app.engine('dust', xDust(app, [mongoReader,...]).__express());\r\n     app.set('view engine', 'dust'); \r\n  \r\n>  Define the source as db.\r\n\r\n      response.render('db:xyz'); \r\n      \r\n## Cache\r\n\r\n   > Pass the redisClient in xDust and application will use a centralized caching mechanism. Which may help you in clearing cache in scalable Architecture.\r\n     Todo so, you can use followings\r\n     \r\n     xDust().cache.flushAll(optionalCallBack); \r\n     \r\n     or \r\n     \r\n     xDust().cache.flush('key',optionalCallBack);\r\n         \r\n \r\n## TODOs\r\n\r\n* ~~Cache~~ \r\n  * ~~Caching of compiled template inside dust.~~\r\n  * ~~Caching of template strings read from sources.~~\r\n* Performance\r\n* Tests\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}